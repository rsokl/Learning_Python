{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conditional Statements\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "\n",
    "**Note**: \n",
    "\n",
    "There are reading-comprehension exercises included throughout the text. These are meant to help you put your reading to practice. Solutions for the exercises are included at the bottom of this page.\n",
    "</div>\n",
    "\n",
    "\n",
    "In this section, we will be introduced to the `if`, `else`, and `elif` statements. These allow you to specify that blocks of code are to be executed only if specified conditions are found to be true, or perhaps alternative code if the condition is found to be false. For example, the following code will square `x` if it is a negative number, and will cube `x` if it is a positive number:\n",
    "```python\n",
    "# a simple if-else block\n",
    "if x < 0:\n",
    "    x = x ** 2\n",
    "else:\n",
    "    x = x ** 3\n",
    "```\n",
    "\n",
    "Please refer to the \"Basic Python Object Types\" subsection to recall the basics of the \"boolean\" type, which represents True and False. We will extend that discussion by introducing comparison operations and membership-checking, and then expanding on the utility of the built-in `bool` type. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison Operations\n",
    "Comparison statements will evaluate explicitly to either of the boolean-objects: `True` or `False`. There are eight comparison operations in Python:\n",
    "\n",
    "| Operation | Meaning                 |\n",
    "| --------- | ----------------------- |\n",
    "| `<`       | strictly less than      |\n",
    "| `<=`      | less than or equal      |\n",
    "| `>`       | strictly greater than   |\n",
    "| `>=`      | greater than or equal   |\n",
    "| `==`      | equal                   |\n",
    "| `!=`      | not equal               |\n",
    "| `is`      | object identity         |\n",
    "| `is not`  | negated object identity |\n",
    "\n",
    "The first six of these operators are familiar from mathematics:\n",
    "\n",
    "```python\n",
    ">>> 2 < 3\n",
    "True\n",
    "```\n",
    "\n",
    "Note that `=` and `==` have very different meanings. The former is an assignment operator, and the latter is the equality operator:\n",
    "\n",
    "```python\n",
    ">>> x = 3   # assign variable `x` to the value 3\n",
    ">>> x == 3  # check if `x` and 3 have the same value\n",
    "True\n",
    "```\n",
    "\n",
    "Python allows you to chain comparison operators to create \"compound\" comparisons:\n",
    "\n",
    "```python\n",
    ">>> 2 < 3 < 1  # performs (2 < 3) and (3 < 1)\n",
    "False\n",
    "```\n",
    "\n",
    "Whereas `==` checks to see if two objects have the same value, the `is` operator checks to see if two objects are actually the *same* object. For example, creating two lists with the same contents produces two *distinct* lists, that have the same \"value\":\n",
    "\n",
    "```python\n",
    "# demonstrating `==` vs `is`\n",
    ">>> x = [1, 2, 3]\n",
    ">>> y = [1, 2, 3]\n",
    "\n",
    ">>> x == y\n",
    "True\n",
    "\n",
    "# `x` and `y` reference equivalent, but distinct lists\n",
    ">>> x is y\n",
    "False\n",
    "```\n",
    "\n",
    "Thus the `is` operator is most commonly used to check if a variable references the `None` object, or either of the boolean objects:\n",
    "```python\n",
    ">>> x = None\n",
    ">>> x is None\n",
    "True\n",
    "\n",
    "# (2 < 0) returns the object `False`\n",
    "# thus this becomes: `False is False`\n",
    ">>> (2 < 0) is False\n",
    "True\n",
    "```\n",
    "\n",
    "Use `is not` to check if two objects are distinct:\n",
    "```python\n",
    ">>> 1 is not None\n",
    "True\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `bool` and Truth Values of Non-Boolean Objects\n",
    "It can be useful to ascribe non-boolean objects with inherit boolean values. For example, in computer science, the number 0 is often associated with `False` and non-zero numbers are associated with `True`. Python ascribes most of its built-in objects with inherent boolean values, which can be evaluated with the built-in Python command `bool`. For example, the Python integer 0 is ascribed the boolean value `False`:\n",
    "\n",
    "```python\n",
    "# Using `bool` to access the True/False\n",
    "# value of non-boolean objects\n",
    ">>> bool(0)\n",
    "False\n",
    "```\n",
    "\n",
    "and non-zero Python integers are associated with `True`:\n",
    "\n",
    "```python\n",
    "# nonzero values evaluate to `True`\n",
    ">>> bool(2)\n",
    "True\n",
    "```\n",
    "The following built-in Python objects evaluate to `False` via `bool`:\n",
    "\n",
    "- `False`\n",
    "- `None`\n",
    "- Zero of any numeric type: `0`, `0.0`, `0j`\n",
    "- Any empty sequence, such as an empty string or list: `''`, `tuple()`, `[]`, `numpy.array([])`\n",
    "- Empty dictionaries and sets\n",
    "\n",
    "Thus non-zero numbers and non-empty sequences/collections evaluate to `True` via `bool`.\n",
    "\n",
    "Given this discussion, logical operations can thus be applied in the context of non-boolean objects, in Python. Although this seldom occurs in practice, we include the following table to summarize how Python formally evaluates its logical operations in the context of non-boolean values:\n",
    "\n",
    "| Operation | Result                               | Example                    |\n",
    "|:---------:|:------------------------------------:|:--------------------------:|\n",
    "| x or y    | if x is false, then y, else x        | `2 or 1` returns  `2`      |\n",
    "| x and y   | if x is false, then x, else y        | `\"hi\" and 0` returns `0`   |\n",
    "| not x     | if x is false, then True, else False | `not [1, 4]` returns `True`|\n",
    "\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Takeaway**: \n",
    "\n",
    "The `bool` function allows you to evaluate the boolean-values ascribed to various non-boolean objects. For instance, `bool([])` returns `False` wherease `bool([1, 2])` returns `True`.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `if`, `else`, and `elif`\n",
    "We now introduce the simple, but powerful `if`, `else`, and `elif` conditional statements. This will allow us to create simple branches in our code. For instance, suppose you are writing code for a video game, and you want to update a character's status based on her/his number of health-points (an integer). The following code is representative of this:\n",
    "\n",
    "```python\n",
    "if num_health > 80:\n",
    "    status = \"good\"\n",
    "elif num_health > 50:\n",
    "    status = \"okay\"\n",
    "elif num_health > 0:\n",
    "    status = \"danger\"\n",
    "else:\n",
    "    status = \"dead\"\n",
    "```\n",
    "\n",
    "The following pseudo-code demonstrates their general template for conditional statements:\n",
    "\n",
    "```\n",
    "if <expression_1>:\n",
    "    the code within this indented block is executed if..\n",
    "    - bool(<expression_1>) is True\n",
    "elif <expression_2>:\n",
    "    the code within this indented block is executed if..\n",
    "     - bool(<expression_1>) was False \n",
    "     - bool(<expression_2>) is True\n",
    "...\n",
    "...\n",
    "elif <expression_n>:\n",
    "    the code within this indented block is executed if..\n",
    "      - bool(<expression_1>) was False\n",
    "      - bool(<expression_2>) was False\n",
    "      ...\n",
    "      ...\n",
    "      - bool(<expression_n-1>) was False\n",
    "      - bool(<expression_n>) is True\n",
    "else:\n",
    "    the code within this indented block is executed only if \n",
    "    all preceding expressions were False\n",
    "\n",
    "```\n",
    "\n",
    "In practice this can look like:\n",
    "\n",
    "```python\n",
    "x = [1, 2]\n",
    "\n",
    "if 3 < len(x):\n",
    "    # bool(3 < 2) returns False, this code \n",
    "    # block is skipped\n",
    "    print(\"`x` has more than three items in it\")\n",
    "elif len(x) == 2\n",
    "    # bool(len(x) == 2) returns True\n",
    "    # this code block is executed\n",
    "    print(\"`x` has two items in it\")\n",
    "elif len(x) == 1\n",
    "    # this statement is never reached\n",
    "    print(\"`x` has one items in it\")\n",
    "else:\n",
    "    # this statement is never reached\n",
    "    print(\"`x` is an empty list\")\n",
    "\n",
    "\"`x` has two items in it\"\n",
    "```\n",
    "\n",
    "In its simplest form, a conditional statement requires only an `if` clause. `else` and `elif` clauses can only follow an `if` clause.\n",
    "\n",
    "```python\n",
    "# A conditional statement consisting of \n",
    "# an \"if\"-clause, only.\n",
    "\n",
    "x = -1\n",
    "\n",
    "if x < 0:\n",
    "    x = x ** 2\n",
    "# x is now 1\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "**Reading Comprehension: Conditional statements**\n",
    "\n",
    "1\\. Assume `my_list` is a list. Given the following code:\n",
    "```python\n",
    "first_item = None\n",
    "\n",
    "if my_list:\n",
    "    first_item = my_list[0]\n",
    "```\n",
    "\n",
    "What will happen if `my_list` is `[]`? Will `IndexError` be raised? What will `first_item` be?\n",
    "\n",
    "2\\. Assume variable `my_file` is a string storing a filename, where a period denotes the end of the filename and the beginning of the file-type. Write code that extracts only the filename.\n",
    "\n",
    "`my_file` will have at most one period in it. Accommodate cases where `my_file` does *not* include a file-type. \n",
    "\n",
    "That is: \n",
    "\n",
    "- `\"code.py\"` $\\rightarrow$ `\"code\"`\n",
    "- `\"doc2.pdf\"` $\\rightarrow$ `\"doc2\"`\n",
    "- `\"hello_world\"` $\\rightarrow$ `\"hello_world\"` \n",
    "\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inline if-else statements\n",
    "Python supports a syntax for writing a restricted version of if-else statements in a single line. The following code:\n",
    "\n",
    "```python\n",
    "if num >= 0:\n",
    "    sign = \"positive\"\n",
    "else:\n",
    "    sign = \"negative\"\n",
    "```\n",
    "\n",
    "can be written in a single line as:\n",
    "\n",
    "```python\n",
    "sign = \"positive\" if num >=0 else \"negative\"\n",
    "```\n",
    "\n",
    "This is suggestive of the general underlying syntax for inline if-else statements:\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**The inline if-else statement**: \n",
    "\n",
    "The expression `A if <condition> else B` returns `A` if `bool(<condition>)` evaluates to `True`, otherwise this expression will return `B`.\n",
    "</div>\n",
    "\n",
    "This syntax is highly restricted compared to the full \"if-elif-else\" expressions - no \"elif\" statement is permitted by this inline syntax, nor are muli-line code blocks within the if/else clauses.\n",
    "\n",
    "Inline if-else statements can be used anywhere, not just on the right side of an assignment statement, and can be quite convenient:\n",
    "```python\n",
    "# using inline if-else statements in different scenarios\n",
    "\n",
    ">>> x = 2\n",
    "\n",
    "# will store 1 if `x` is non-negative\n",
    "# will store 0 if `x` is negative\n",
    ">>> my_list = [1 if x >= 0 else 0]\n",
    ">>> my_list\n",
    "[1]\n",
    "\n",
    ">>> \"a\" if x == 1 else \"b\"\n",
    "\"b\n",
    "```\n",
    "We will see this syntax shine when we learn about comprehension statements. That being said, this syntax should be used judiciously. For example, inline if-else statements ought not be used in arithmetic expressions, for therein lies madness:\n",
    "\n",
    "```python\n",
    "# don't ever do this...ever!\n",
    "2 - 3 if x < 1 else 1 + 6*2 if x >= 0 else 9\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Comprehension Exercise Solutions:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conditional statements**\n",
    "\n",
    "1\\. If `my_list` is `[]`, then `bool(my_list)` will return `False`, and the code block will be skipped. Thus `first_item` will be `None`.\n",
    "\n",
    "2\\. First, check to see if `.` is even contained in `my_file`. If it is, find its index-position, and slice the string up to that index. Otherwise, `my_file` is already the file name.\n",
    "```python\n",
    "\n",
    "my_file = \"code.pdf\"\n",
    "\n",
    "if \".\" in my_file:\n",
    "    dot_index = my_file.index(\".\")\n",
    "    filename = my_file[:dot_index]\n",
    "else:\n",
    "    filename = my_file\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
